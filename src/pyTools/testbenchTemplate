
/******************************************************************************/
// `include "gParam.v"
//==============================================================================
`timescale 1 ns / 1 ps
//==============================================================================
module {{module_name}}_tb;
//------------------------------------------------------------------------------
//  simulation parameters
//------------------------------------------------------------------------------
    localparam CLK_FREQ = 100_000_000;
    localparam [0:0] RESET_LEVEL = 1;

//------------------------------------------------------------------------------
//  global clock and reset
//------------------------------------------------------------------------------
    reg tb_clk = 0;
    reg tb_rst = RESET_LEVEL;
    // -------- clock --------
    localparam PERIOD = 1E9/CLK_FREQ;
    initial begin
        forever #(PERIOD/2) tb_clk = ~ tb_clk;
    end
    // -------- reset --------
    task sim_reset(input integer n);
        begin
            tb_rst = RESET_LEVEL;
            repeat(n) @(posedge tb_clk);
            #1;
            tb_rst = ~tb_rst;
        end
    endtask
//------------------------------------------------------------------------------
//  UUT
//------------------------------------------------------------------------------
    // * connect your clock/reset with the signal "tb_clk"/"tb_rst"
{{uut}}
//------------------------------------------------------------------------------
//  UUT - initial values
//------------------------------------------------------------------------------
    // * connect your clock/reset with the signal "tb_clk"/"tb_rst"

//------------------------------------------------------------------------------
//  simulation models
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  general simulation tasks or functions
//------------------------------------------------------------------------------
    // -------- wait n clock cycles --------
    task wait_ncc(input integer n);
        begin
            repeat(n) @(posedge tb_clk);
        end
    endtask
    // -------- wait n clock cycles (with Tcko) --------
    task wait_ncco(input integer n);
        begin
            wait_ncc(n);
            #1;
        end
    endtask
    // -------- show messages for simulation (100 charactors MAX) --------
    reg [1:100*8] sim_msg;
    task show_sim_message(input [1:100*8] msg);
        begin: break
            sim_msg = msg;
            while (1) begin
                if(sim_msg[1:8] == 0)
                    sim_msg = sim_msg<<8;
                else
                    disable break;
            end
        end
    endtask
//------------------------------------------------------------------------------
//  simulation tasks
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  run simulation
//------------------------------------------------------------------------------
    initial begin
        // -------- RESET --------
        show_sim_message("reset");
        sim_reset(10);
        // --------  --------


        // -------- END --------
        show_sim_message("END");
        repeat(10) begin
            wait_ncc(100);
            $stop();
        end
    end
//------------------------------------------------------------------------------
endmodule
